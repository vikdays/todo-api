package com.example.demo.service

import com.example.demo.dto.request.CreateTask
import com.example.demo.dto.response.TaskResponse
import com.example.demo.entity.Task
import com.example.demo.enums.TaskPriority
import com.example.demo.enums.TaskStatus
import com.example.demo.repository.ItemRepository
import org.junit.jupiter.api.*
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource
import org.mockito.ArgumentMatchers.any
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.Mockito
import org.mockito.Mockito.*
import org.mockito.junit.jupiter.MockitoExtension
import org.mockito.kotlin.whenever

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*
/*
@ExtendWith(MockitoExtension::class)
class ItemServiceTest {
    private lateinit var repository: ItemRepository
    private lateinit var service: ItemService

    @BeforeEach
    fun setup() {
        repository = mock()
        service = ItemService(repository)
    }

    private fun sampleTask(
        id: Long = 1L,
        priority: TaskPriority = TaskPriority.Medium,
        deadline: LocalDate? = LocalDate.now().plusDays(1),
        isDone: Boolean = false,
        status: TaskStatus = TaskStatus.Active
    ): Task {
        return Task(
            id = id,
            title = "Sample",
            description = "Description",
            deadline = deadline,
            priority = priority,
            status = status,
            isDone = isDone,
            createdAt = LocalDate.now().minusDays(1),
            updatedAt = LocalDate.now()
        )
    }
    // üÜï –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    @ParameterizedTest
    @CsvSource(
        "!1 Critical task, Critical",
        "!2 High task, High",
        "!3 Medium task, Medium",
        "!4 Low task, Low"
    )
    fun `createTask should parse priority macros correctly`(macroTitle: String, expectedPriority: String) {
        val request = CreateTask(macroTitle, "desc")
        val fakeTask = sampleTask(priority = TaskPriority.valueOf(expectedPriority))
        whenever(repository.save(any())).thenReturn(fakeTask)

        val result = service.createTask(request)

        assertEquals(TaskPriority.valueOf(expectedPriority), result.priority)
    }

    @ParameterizedTest
    @CsvSource(
        "Task !before 01.01.2026, 2026-01-01",  // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "Task !before 01-01-2026, 2026-01-01",  // —Å –¥–µ—Ñ–∏—Å–∞–º–∏

    )
    fun `createTask should parse different date formats in deadline macro`(title: String, expectedDate: String) {
        val request = CreateTask(title, "desc")
        val expected = LocalDate.parse(expectedDate)
        val savedTask = sampleTask(deadline = expected)

        `when`(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertEquals(expected, result.deadline)
        assertFalse(result.title.contains("!before"))
    }

    @ParameterizedTest
    @CsvSource(
        "!1 Critical !before 01.01.2026, Critical, 2026-01-01",
        "!2 High !before 15.06.2025, High, 2025-06-15"
    )
    fun `createTask should handle combined priority and deadline macros`(
        title: String,
        expectedPriority: String,
        expectedDate: String
    ) {
        val request = CreateTask(title, "desc")
        val priority = TaskPriority.valueOf(expectedPriority)
        val deadline = LocalDate.parse(expectedDate)
        val savedTask = sampleTask(priority = priority, deadline = deadline)

        `when`(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertEquals(priority, result.priority)
        assertEquals(deadline, result.deadline)
        assertFalse(result.title.contains("!"))
    }

    @Test
    fun createTask_withMinimalRequest_returnsCorrectTaskResponse() {
        val request = CreateTask(
            title = "Test task",
            description = "Test description",
            deadline = "01.01.2026"
        )

        val savedTask = createTestTask()

        `when`(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertTaskEquals(savedTask, result)
        verify(repository).save(any())
    }

    @Test
    fun createTask_withDeadlineToday_returnsCorrectTaskResponse() {
        val today = LocalDate.now()
        val formatted = today.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy"))

        val request = CreateTask(
            title = "Task today",
            description = "Due today",
            deadline = formatted
        )

        val expected = Task(
            id = 3L,
            title = "Task today",
            description = "Due today",
            deadline = today,
            priority = TaskPriority.Medium,
            status = TaskStatus.Active,
            isDone = false,
            createdAt = today,
            updatedAt = today
        )

        Mockito.`when`(repository.save(any())).thenReturn(expected)

        val result = service.createTask(request)
        assertEquals(today, result.deadline)
    }

    @Test
    fun createTask_withMacrosForDeadline_returnsCorrectTaskResponse() {
        val request = CreateTask(
            title = "Important task !before 01.01.2026",
            description = "Test with macro",
            deadline = null
        )

        val expectedDeadline = LocalDate.of(2026, 1, 1)
        val expected = Task(
            id = 4L,
            title = "Important task",
            description = "Test with macro",
            deadline = expectedDeadline,
            priority = TaskPriority.Medium,
            status = TaskStatus.Active,
            isDone = false,
            createdAt = LocalDate.now(),
            updatedAt = LocalDate.now()
        )

        Mockito.`when`(repository.save(any())).thenReturn(expected)

        val result = service.createTask(request)
        assertEquals(expectedDeadline, result.deadline)
        assertEquals("Important task", result.title)
    }


    private fun createTestTask(): Task {
        return Task(
            id = 1L,
            title = "Test task",
            description = "Test description",
            deadline = LocalDate.of(2026, 1, 1),
            priority = TaskPriority.Medium,
            status = TaskStatus.Active,
            isDone = false,
            createdAt = LocalDate.now(),
            updatedAt = LocalDate.now()
        )
    }

    private fun assertTaskEquals(expected: Task, actual: TaskResponse) {
        assertEquals(expected.id, actual.id)
        assertEquals(expected.title, actual.title)
        assertEquals(expected.description, actual.description)
        assertEquals(expected.priority, actual.priority)
        assertEquals(expected.deadline, actual.deadline)
        assertEquals(expected.status, actual.status)
    }

    @Test
    fun `createTask should throw exception for invalid date format in macro`() {
        val request = CreateTask(
            title = "Do something !before 32.13.2024", // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞
            description = "Bad macro test",
            deadline = null
        )

        // –ù–µ –Ω—É–∂–Ω–æ –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å repository.save(), —Ç–∞–∫ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ
        val ex = assertThrows<IllegalArgumentException> {
            service.createTask(request)
        }

        assertTrue(ex.message!!.contains("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã") ||
                ex.message!!.contains("–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"))
    }

    @Test
    fun `createTask should throw exception for past date in macro`() {
        val pastDate = LocalDate.now().minusDays(1).format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))
        val request = CreateTask(
            title = "Finish project !before $pastDate",
            description = "Past deadline test",
            deadline = null
        )

        val ex = assertThrows<IllegalArgumentException> {
            service.createTask(request)
        }

        assertTrue(ex.message!!.contains("–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º"))
    }

    @Test
    fun `createTask should throw exception for invalid priority macro`() {
        val request = CreateTask(
            title = "Critical issue !5",
            description = "Invalid priority macro",
            deadline = null
        )
        val ex = assertThrows<IllegalArgumentException> {
            service.createTask(request)
        }

        assertEquals("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 5", ex.message)
    }


    // üéØ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
    @Test
    fun `createTask with valid request creates task`() {
        val request = CreateTask("!1 Valid Task", "desc")
        val task = sampleTask(priority = TaskPriority.Low)
        `when`(repository.save(any())).thenReturn(task)

        val result = service.createTask(request)

        assertEquals(TaskPriority.Low, result.priority)
        assertEquals("Sample", result.title)
    }

    // üéØ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ = —Å–µ–≥–æ–¥–Ω—è
    @Test
    fun `createTask with today deadline assigns Active status`() {
        val today = LocalDate.now()
        val formatted = today.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))
        val request = CreateTask("!1 !before $formatted Title", "desc")

        whenever(repository.save(any())).thenAnswer { it.arguments[0] }

        val result = service.createTask(request)

        assertEquals(TaskStatus.Active, result.status)
        assertEquals(TaskPriority.Critical, result.priority)
        assertEquals(today, result.deadline)
    }

    // üéØ –ü–æ–ø–∞—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å + –¥–µ–¥–ª–∞–π–Ω
    @Test
    fun `toggleDoneStatus for overdue task sets Late`() {
        val overdueTask = sampleTask(deadline = LocalDate.now().minusDays(3), isDone = false)
        `when`(repository.findById(1L)).thenReturn(Optional.of(overdueTask))
        `when`(repository.save(any())).thenAnswer { it.arguments[0] }

        val result = service.toggleDoneStatus(1L)

        assertEquals(TaskStatus.Late, result!!.status)
    }

    // üéØ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å null –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    @Test
    fun `getAllTasksFilteredSorted with null filters returns all`() {
        val task1 = sampleTask(1L)
        val task2 = sampleTask(2L)
        `when`(repository.findAll()).thenReturn(listOf(task1, task2))

        val result = service.getAllTasksFilteredSorted("createdAt", "asc", null, null, null)

        assertEquals(2, result.size)
    }

    // üéØ –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ ‚Äî —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å)
    @Test
    fun `getAllTasksFilteredSorted with invalid status value returns empty list`() {
        val task = sampleTask()
        `when`(repository.findAll()).thenReturn(listOf(task))

        val result = service.getAllTasksFilteredSorted("priority", "asc", "INVALID_STATUS", null, null)

        assertEquals(0, result.size)
    }

    // üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: isDone + priority
    @Test
    fun `getAllTasksFilteredSorted filters by isDone and priority`() {
        val task1 = sampleTask(1, isDone = true, priority = TaskPriority.High)
        val task2 = sampleTask(2, isDone = false, priority = TaskPriority.High)
        val task3 = sampleTask(3, isDone = true, priority = TaskPriority.Medium)
        `when`(repository.findAll()).thenReturn(listOf(task1, task2, task3))

        val result = service.getAllTasksFilteredSorted("priority", "asc", null, true, "High")

        assertEquals(1, result.size)
        assertEquals(1L, result[0].id)
    }

    // üéØ –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    @Test
    fun `getAllTasksFilteredSorted returns empty when repository empty`() {
        `when`(repository.findAll()).thenReturn(emptyList())

        val result = service.getAllTasksFilteredSorted("createdAt", "asc", null, null, null)

        assertTrue(result.isEmpty())
    }

    // üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É
    //–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    @Test
    fun `getAllTasksFilteredSorted sorts by deadline ascending`() {
        val t1 = sampleTask(1L, deadline = LocalDate.of(2025, 5, 1))
        val t2 = sampleTask(2L, deadline = LocalDate.of(2025, 4, 1))
        `when`(repository.findAll()).thenReturn(listOf(t1, t2))

        val result = service.getAllTasksFilteredSorted("deadline", "asc", null, null, null)

        assertEquals(2L, result[0].id)
        assertEquals(1L, result[1].id)
    }

    // üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è: –¥–µ–¥–ª–∞–π–Ω null
    //–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    @Test
    fun `getAllTasksFilteredSorted handles null deadlines by pushing to end`() {
        val t1 = sampleTask(1L, deadline = null)
        val t2 = sampleTask(2L, deadline = LocalDate.now())
        `when`(repository.findAll()).thenReturn(listOf(t1, t2))

        val result = service.getAllTasksFilteredSorted("deadline", "asc", null, null, null)

        assertEquals(2L, result[0].id)  // —É –∫–æ–≥–æ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        assertEquals(1L, result[1].id)
    }
}*/

@ExtendWith(MockitoExtension::class)
class ItemServiceTest {

    @Mock
    private lateinit var repository: ItemRepository

    @InjectMocks
    private lateinit var service: ItemService

    // üéØ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –º–∞–∫—Ä–æ—Å–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    @ParameterizedTest
    @CsvSource(
        "!1 Critical task, Critical",
        "!2 High task, High",
        "!3 Medium task, Medium",
        "!4 Low task, Low"
    )
    @DisplayName("createTask: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –º–∞–∫—Ä–æ—Å–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (!1-!4)")
    fun `createTask should parse priority macros correctly`(macroTitle: String, expectedPriority: String) {
        val request = CreateTask(macroTitle, "desc")
        val fakeTask = sampleTask(priority = TaskPriority.valueOf(expectedPriority))

        whenever(repository.save(any())).thenReturn(fakeTask)

        val result = service.createTask(request)

        assertEquals(TaskPriority.valueOf(expectedPriority), result.priority)
    }

    // üéØ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    @ParameterizedTest
    @CsvSource(
        "Task !before 01.01.2026, 2026-01-01",
        "Task !before 01-01-2026, 2026-01-01"
    )
    @DisplayName("createTask: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã –≤ –º–∞–∫—Ä–æ—Å–µ –¥–µ–¥–ª–∞–π–Ω–∞")
    fun `createTask should parse different date formats in deadline macro`(title: String, expectedDate: String) {
        val request = CreateTask(title, "desc")
        val expected = LocalDate.parse(expectedDate)

        val savedTask = sampleTask(deadline = expected)
        whenever(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertEquals(expected, result.deadline)
        assertFalse(result.title.contains("!before"))
    }

    // üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –º–∞–∫—Ä–æ—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ + –¥–µ–¥–ª–∞–π–Ω–∞
    @ParameterizedTest
    @CsvSource(
        "!1 Critical !before 01.01.2026, Critical, 2026-01-01",
        "!2 High !before 15.06.2025, High, 2025-06-15"
    )
    @DisplayName("createTask: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–∫—Ä–æ—Å–æ–≤ (!1 !before)")
    fun `createTask should handle combined priority and deadline macros`(
        title: String,
        expectedPriority: String,
        expectedDate: String
    ) {
        val request = CreateTask(title, "desc")
        val priority = TaskPriority.valueOf(expectedPriority)
        val deadline = LocalDate.parse(expectedDate)

        val savedTask = sampleTask(priority = priority, deadline = deadline)
        whenever(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertEquals(priority, result.priority)
        assertEquals(deadline, result.deadline)
        assertFalse(result.title.contains("!"))
    }

    @Test
    @DisplayName("createTask: —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    fun createTask_withMinimalRequest_returnsCorrectTaskResponse() {
        val request = CreateTask("Test task", "Test description", "01.01.2026")
        val savedTask = createTestTask()

        whenever(repository.save(any())).thenReturn(savedTask)

        val result = service.createTask(request)

        assertTaskEquals(savedTask, result)
        verify(repository).save(any())
    }

    @Test
    @DisplayName("createTask: –¥–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å—Ç–∞—Ç—É—Å Active")
    fun createTask_withDeadlineToday_returnsCorrectTaskResponse() {
        val today = LocalDate.now()
        val formatted = today.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))

        val request = CreateTask("Task today", "Due today", formatted)
        val expected = sampleTask(deadline = today)

        whenever(repository.save(any())).thenReturn(expected)

        val result = service.createTask(request)
        assertEquals(today, result.deadline)
    }

    @Test
    @DisplayName("createTask: –¥–µ–¥–ª–∞–π–Ω –∏–∑ –º–∞–∫—Ä–æ—Å–∞ !before –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    fun createTask_withMacrosForDeadline_returnsCorrectTaskResponse() {
        val request = CreateTask("Important task !before 01.01.2026", "Test with macro")
        val expectedDeadline = LocalDate.of(2026, 1, 1)
        val expected = sampleTask(title = "Important task", deadline = expectedDeadline)

        whenever(repository.save(any())).thenReturn(expected)

        val result = service.createTask(request)

        assertEquals(expectedDeadline, result.deadline)
        assertEquals("Important task", result.title)
    }

    // ‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    @Test
    @DisplayName("createTask: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–µ –≤ –º–∞–∫—Ä–æ—Å–µ")
    fun `createTask should throw exception for invalid date format in macro`() {
        val request = CreateTask("Do something !before 32.13.2024", "Bad macro test")

        val ex = assertThrows<IllegalArgumentException> {
            service.createTask(request)
        }

        assertTrue(ex.message!!.contains("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"))
    }

    // ‚ùå –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º
    @Test
    @DisplayName("createTask: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–¥–ª–∞–π–Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º")
    fun `createTask should throw exception for past date in macro`() {
        val pastDate = LocalDate.now().minusDays(1).format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))
        val request = CreateTask("Finish project !before $pastDate", "Past deadline test")

        val ex = assertThrows<IllegalArgumentException> {
            service.createTask(request)
        }

        assertTrue(ex.message!!.contains("–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º"))
    }

    @Test
    @DisplayName("createTask: '!5' –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–∞–∫—Ä–æ—Å–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
    fun `createTask should ignore invalid priority macro and keep title unchanged`() {
        // Arrange
        val request = CreateTask(
            title = "–ü—Ä–æ–±–ª–µ–º–∞ —É—Ä–æ–≤–Ω—è !5",
            description = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞–∫—Ä–æ—Å"
        )

        // Act
        val result = service.createTask(request)

        // Assert
        assertEquals("–ü—Ä–æ–±–ª–µ–º–∞ —É—Ä–æ–≤–Ω—è !5", result.title)
        assertEquals(TaskPriority.Medium, result.priority) // –¥–µ—Ñ–æ–ª—Ç
    }

    @Test
    @DisplayName("createTask: happy path ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É")
    fun `createTask with valid request creates task`() {
        val request = CreateTask("!1 Valid Task", "desc")
        val task = sampleTask(priority = TaskPriority.Critical)

        whenever(repository.save(any())).thenReturn(task)

        val result = service.createTask(request)

        assertEquals(TaskPriority.Critical, result.priority)
        assertEquals("Sample", result.title)
    }

    @Test
    @DisplayName("toggleDoneStatus: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Late")
    fun `toggleDoneStatus for overdue task sets Late`() {
        val overdueTask = sampleTask(deadline = LocalDate.now().minusDays(3), isDone = false)
        whenever(repository.findById(1L)).thenReturn(Optional.of(overdueTask))
        whenever(repository.save(any())).thenAnswer { it.arguments[0] }

        val result = service.toggleDoneStatus(1L)

        assertEquals(TaskStatus.Late, result!!.status)
    }

    // üéØ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: null —Ñ–∏–ª—å—Ç—Ä—ã
    @Test
    @DisplayName("getAllTasksFilteredSorted: null —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏")
    fun `getAllTasksFilteredSorted with null filters returns all`() {
        val task1 = sampleTask(1L)
        val task2 = sampleTask(2L)
        whenever(repository.findAll()).thenReturn(listOf(task1, task2))

        val result = service.getAllTasksFilteredSorted("createdAt", "asc", null, null, null)

        assertEquals(2, result.size)
    }

    @Test
    @DisplayName("getAllTasksFilteredSorted: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ isDone –∏ priority")
    fun `getAllTasksFilteredSorted filters by isDone and priority`() {
        val task1 = sampleTask(1, isDone = true, priority = TaskPriority.High)
        val task2 = sampleTask(2, isDone = false, priority = TaskPriority.High)
        val task3 = sampleTask(3, isDone = true, priority = TaskPriority.Medium)

        whenever(repository.findAll()).thenReturn(listOf(task1, task2, task3))

        val result = service.getAllTasksFilteredSorted("priority", "asc", null, true, "High")

        assertEquals(1, result.size)
        assertEquals(1L, result[0].id)
    }

    @Test
    @DisplayName("getAllTasksFilteredSorted: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    fun `getAllTasksFilteredSorted returns empty when repository empty`() {
        whenever(repository.findAll()).thenReturn(emptyList())

        val result = service.getAllTasksFilteredSorted("createdAt", "asc", null, null, null)

        assertTrue(result.isEmpty())
    }

    @Test
    @DisplayName("getAllTasksFilteredSorted: –¥–µ–¥–ª–∞–π–Ω null ‚Äî –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ü–µ")
    fun `getAllTasksFilteredSorted handles null deadlines by pushing to end`() {
        val t1 = sampleTask(1L, deadline = null)
        val t2 = sampleTask(2L, deadline = LocalDate.now())

        whenever(repository.findAll()).thenReturn(listOf(t1, t2))

        val result = service.getAllTasksFilteredSorted("deadline", "asc", null, null, null)

        assertEquals(2L, result[0].id)
        assertEquals(1L, result[1].id)
    }

    // üîß –£—Ç–∏–ª–∏—Ç—ã
    private fun sampleTask(
        id: Long = 1L,
        title: String = "Sample",
        description: String = "Description",
        deadline: LocalDate? = LocalDate.now().plusDays(1),
        priority: TaskPriority = TaskPriority.Medium,
        status: TaskStatus = TaskStatus.Active,
        isDone: Boolean = false
    ) = Task(id, title, description, deadline, status, priority, LocalDate.now().minusDays(1), LocalDate.now(), isDone)

    private fun createTestTask(): Task = sampleTask(deadline = LocalDate.of(2026, 1, 1))

    private fun assertTaskEquals(expected: Task, actual: TaskResponse) {
        assertEquals(expected.id, actual.id)
        assertEquals(expected.title, actual.title)
        assertEquals(expected.description, actual.description)
        assertEquals(expected.priority, actual.priority)
        assertEquals(expected.deadline, actual.deadline)
        assertEquals(expected.status, actual.status)
    }
}


